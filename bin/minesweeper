#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'dispel'
require 'highline'
require 'minesweeper'

@board_rows  = Minesweeper::DefaultRows
@board_cols  = Minesweeper::DefaultCols
@board_mines = Minesweeper::DefaultMines

def return_num(val)
  num = val.to_i
  (!num.nil? && num > 0) ? num : 0
end

def setup
	cli = HighLine.new
	cli.choose do |menu|
		menu.prompt = "Setup board => rows: #{@board_rows}, cols: #{@board_cols}, mines: #{@board_mines}"
		menu.choice(:rows) do
		  rows = return_num cli.ask("Number of rows: ")
		  @board_rows = rows if rows > 0
		  setup
		end
		menu.choice(:cols) do
		  cols = return_num cli.ask("Number of cols: ")
		  @board_cols = cols if cols > 0
		  setup
		end
		menu.choice(:mines) do
		  mines = return_num cli.ask("Number of mines: ")
		  @board_mines = mines if mines > 0
		  setup
		end
		menu.choice(:start) { setup_game }
	end
end

def setup_game
	@game = Minesweeper.new_game(rows: @board_rows, cols: @board_cols, mines: @board_mines)
end

def start_game
	Dispel::Screen.open do |screen|
		screen.draw view

		Dispel::Keyboard.output do |key|
			case key
			# move selection
			when :up, :down, :left, :right
				@game.dispatch_action :move, key
			# actions
			when 'f'
				@game.dispatch_action :toggle
			when 's'
				@game.dispatch_action :reveal
			when 'q'
				break
			when 'r'
				setup_game
			end
			screen.draw view
		end
	end
end

def view
	lines = [*(@game.draw), "#{@game.stats}"]
	lines << @game.read_flash_msg
	lines << "(f)lag, (s)elect, arrow keys to move, (r)estart, (q)uit."
  lines.join("\n")
end

setup
start_game

